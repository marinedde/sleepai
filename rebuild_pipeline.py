"""
Script pour recr√©er et sauvegarder le pipeline avec la classe FeatureExtractor
depuis le code Python (pas depuis le notebook).
"""

import numpy as np
import joblib
from pathlib import Path
import sys

# Ajouter app/ au path pour importer FeatureExtractor
sys.path.insert(0, str(Path(__file__).parent))

from app.feature_extractor import FeatureExtractor
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier

print("=" * 70)
print("üîß RECONSTRUCTION DU PIPELINE")
print("=" * 70)

# Chemins
OLD_MODEL_PATH = Path("notebooks/models/random_forest_v2_features.pkl")
NEW_PIPELINE_PATH = Path("notebooks/models/rf_v2_pipeline_fixed.joblib")

# Cr√©er le dossier si n√©cessaire
NEW_PIPELINE_PATH.parent.mkdir(parents=True, exist_ok=True)

# ============================================================================
# Option 1 : Charger l'ancien mod√®le RF et reconstruire le pipeline
# ============================================================================

print("\nüì¶ Chargement de l'ancien mod√®le Random Forest...")

try:
    # Charger le mod√®le RF sauvegard√© (juste le classifier, pas le pipeline)
    import pickle
    with open(OLD_MODEL_PATH, 'rb') as f:
        rf_model = pickle.load(f)
    
    print(f"‚úÖ Mod√®le charg√© depuis {OLD_MODEL_PATH}")
    print(f"   Type: {type(rf_model)}")
    
except Exception as e:
    print(f"‚ùå Impossible de charger l'ancien mod√®le: {e}")
    print("\n‚ö†Ô∏è  On va cr√©er un nouveau pipeline avec les bons hyperparam√®tres")
    
    # Cr√©er un nouveau mod√®le avec les m√™mes hyperparam√®tres
    rf_model = RandomForestClassifier(
        n_estimators=500,
        max_depth=50,
        min_samples_split=2,
        min_samples_leaf=1,
        max_features='sqrt',
        random_state=42,
        n_jobs=-1
    )
    print("‚úÖ Nouveau mod√®le Random Forest cr√©√©")

# ============================================================================
# Construire le nouveau pipeline
# ============================================================================

print("\nüî® Construction du pipeline...")

pipeline = Pipeline([
    ('feature_extractor', FeatureExtractor(fs=100, expected_len=3000)),
    ('scaler', StandardScaler()),
    ('classifier', rf_model)
])

print("‚úÖ Pipeline cr√©√©")
print(f"   √âtapes: {list(pipeline.named_steps.keys())}")

# ============================================================================
# Si le mod√®le RF n'√©tait pas entra√Æn√©, on doit le r√©entra√Æner
# ============================================================================

# V√©rifier si le mod√®le est entra√Æn√©
try:
    # Tester avec un signal bidon
    test_signal = np.random.randn(1, 3000)
    _ = pipeline.predict(test_signal)
    print("‚úÖ Le mod√®le est d√©j√† entra√Æn√©")
    
except Exception as e:
    print(f"‚ö†Ô∏è  Le mod√®le n'est pas entra√Æn√©: {e}")
    print("\nüìä Chargement des donn√©es d'entra√Ænement...")
    
    # Charger les donn√©es
    data_dir = Path("notebooks/data/processed")
    
    try:
        X_train = np.load(data_dir / 'X_train.npy')
        y_train = np.load(data_dir / 'y_train.npy')
        
        print(f"‚úÖ Donn√©es charg√©es: {X_train.shape}")
        
        # Appliquer SMOTE si n√©cessaire
        from imblearn.over_sampling import SMOTE
        print("\n‚öñÔ∏è  Application de SMOTE...")
        smote = SMOTE(random_state=42)
        X_train_balanced, y_train_balanced = smote.fit_resample(X_train, y_train)
        print(f"   {X_train.shape} ‚Üí {X_train_balanced.shape}")
        
        # Entra√Æner le pipeline
        print("\nüéì Entra√Ænement du pipeline...")
        print("   (Cela peut prendre 1-2 minutes)")
        pipeline.fit(X_train_balanced, y_train_balanced)
        print("‚úÖ Pipeline entra√Æn√©")
        
    except FileNotFoundError:
        print("‚ùå Donn√©es d'entra√Ænement non trouv√©es")
        print("   Le pipeline sera sauvegard√© mais non entra√Æn√©")

# ============================================================================
# Sauvegarder le nouveau pipeline
# ============================================================================

print(f"\nüíæ Sauvegarde du pipeline...")
print(f"   Destination: {NEW_PIPELINE_PATH}")

try:
    joblib.dump(pipeline, NEW_PIPELINE_PATH)
    
    # V√©rifier la taille
    file_size = NEW_PIPELINE_PATH.stat().st_size / (1024 * 1024)
    print(f"‚úÖ Pipeline sauvegard√©!")
    print(f"   Taille: {file_size:.2f} MB")
    
except Exception as e:
    print(f"‚ùå Erreur lors de la sauvegarde: {e}")
    raise

# ============================================================================
# Test de chargement
# ============================================================================

print(f"\nüß™ Test de chargement du nouveau pipeline...")

try:
    # Charger le pipeline
    loaded_pipeline = joblib.load(NEW_PIPELINE_PATH)
    print("‚úÖ Pipeline charg√© avec succ√®s")
    
    # Test pr√©diction
    test_signal = np.random.randn(1, 3000)
    prediction = loaded_pipeline.predict(test_signal)
    probabilities = loaded_pipeline.predict_proba(test_signal)
    
    class_names = {0: 'Wake', 1: 'N1', 2: 'N2', 3: 'N3', 4: 'REM'}
    predicted_class = class_names[int(prediction[0])]
    confidence = np.max(probabilities)
    
    print(f"‚úÖ Pr√©diction fonctionnelle!")
    print(f"   Classe: {predicted_class}")
    print(f"   Confiance: {confidence:.2%}")
    
except Exception as e:
    print(f"‚ùå Erreur lors du test: {e}")
    import traceback
    traceback.print_exc()

# ============================================================================
# Instructions finales
# ============================================================================

print("\n" + "=" * 70)
print("‚úÖ PIPELINE RECONSTRUIT AVEC SUCC√àS!")
print("=" * 70)
print(f"""
üìù PROCHAINES √âTAPES:

1. Dans app/main.py, modifier la ligne 31:
   
   MODEL_PATH = PROJECT_ROOT / "notebooks" / "models" / "rf_v2_pipeline_fixed.joblib"

2. Relancer le serveur:
   
   uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

3. Tester l'API:
   
   http://localhost:8000/docs
""")
print("=" * 70)